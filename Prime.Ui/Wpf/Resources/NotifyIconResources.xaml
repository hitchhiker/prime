<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:tb="http://www.hardcodet.net/taskbar"
                    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
                    xmlns:viewModel="clr-namespace:Prime.Ui.Wpf.ViewModel">

    <!-- The taskbar context menu - the first row is a dummy to show off simple data binding -->
    <!--
        The "shared" directive is needed if we reopen the sample window a few times - WPF will otherwise
        reuse the same context menu (which is a resource) again (which will have its DataContext set to the old TaskbarIcon)
  -->
    <ContextMenu x:Shared="false" x:Key="SysTrayMenu" FontSize="12" BorderThickness="1" Padding="0,10,0,5" BorderBrush="#aaa">
        <MenuItem Header="New Window" Command="{Binding NewWindowCommand}">
            <MenuItem.Icon>
                <iconPacks:PackIconMaterialLight Kind="Plus" VerticalAlignment="Center" HorizontalAlignment="Center" Height="13" Width="13" Margin="10,0,0,0" />
            </MenuItem.Icon>
        </MenuItem>
        <MenuItem Header="Show" Command="{Binding ShowAllWindowCommand}" />
        <MenuItem Header="Hide" Command="{Binding MinimiseAllWindowCommand}" />
        <Separator Margin="-10,0,10,0"/>
        <MenuItem Header="Exit" Command="{Binding ExitApplicationCommand}">
            <MenuItem.Icon>
                <iconPacks:PackIconMaterialLight Kind="Alert" VerticalAlignment="Center" HorizontalAlignment="Center" Height="13" Width="13" Margin="10,0,0,0" />
            </MenuItem.Icon>
        </MenuItem>
    </ContextMenu>


    <!-- the application's NotifyIcon - started from App.xaml.cs. Declares its own view model. -->
    <tb:TaskbarIcon x:Key="NotifyIcon"
                    IconSource="/prime-17.ico"
                    ToolTipText="Prime: Double-click to show / hide windows, right-click for menu."
                    DoubleClickCommand="{Binding DoubleClickWindowCommand}"
                    ContextMenu="{StaticResource SysTrayMenu}">

        <!-- self-assign a data context (could also be done programmatically) -->
        <tb:TaskbarIcon.DataContext>
            <viewModel:NotifyIconViewModel />
        </tb:TaskbarIcon.DataContext>
    </tb:TaskbarIcon>

</ResourceDictionary>