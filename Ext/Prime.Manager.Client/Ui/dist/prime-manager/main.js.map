{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/exchange-dialog/exchange-dialog.component.css","webpack:///./src/app/exchange-dialog/exchange-dialog.component.html","webpack:///./src/app/exchange-dialog/exchange-dialog.component.ts","webpack:///./src/app/exchange/exchange.component.css","webpack:///./src/app/exchange/exchange.component.html","webpack:///./src/app/exchange/exchange.component.ts","webpack:///./src/app/exchanges/exchanges.component.css","webpack:///./src/app/exchanges/exchanges.component.html","webpack:///./src/app/exchanges/exchanges.component.ts","webpack:///./src/app/material.module.ts","webpack:///./src/app/models/Exchange.ts","webpack:///./src/app/models/ExchangeDetails.ts","webpack:///./src/app/models/messages.ts","webpack:///./src/app/models/private-api-context.ts","webpack:///./src/app/models/socket-state.ts","webpack:///./src/app/pipes/filter.pipe.ts","webpack:///./src/app/services/action-throttler.service.ts","webpack:///./src/app/services/logger.service.ts","webpack:///./src/app/services/prime-socket.service.ts","webpack:///./src/app/services/ws-client.service.ts","webpack:///./src/app/toolbar/toolbar.component.css","webpack:///./src/app/toolbar/toolbar.component.html","webpack:///./src/app/toolbar/toolbar.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,oCAAoC,yBAAyB,KAAK,oBAAoB,sBAAsB,KAAK,wBAAwB,0BAA0B,KAAK,a;;;;;;;;;;;ACAxK,ge;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AAGmB;AAOrE;IASE,sBAAoB,cAAkC;QAAlC,mBAAc,GAAd,cAAc,CAAoB;QAH9C,QAAG,GAAG,uBAAuB,CAAC;QAOtC,UAAK,GAAG,mBAAmB,CAAC;IAF5B,CAAC;IATD,+BAAQ,GAAR;IAEA,CAAC;IAJU,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAUoC,iFAAkB;OAT3C,YAAY,CAcxB;IAAD,mBAAC;CAAA;AAdwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACViC;AACqB;AACtC;AACU;AAEJ;AACsB;AACN;AACG;AACoB;AACzC;AAEa;AACK;AACM;AACpB;AA2BjD;IAAA;IAAyB,CAAC;IAAb,SAAS;QAzBrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,iFAAkB;gBAClB,2EAAgB;gBAChB,8EAAiB;gBACjB,kGAAuB;gBACvB,8DAAU;aACX;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,4FAAuB;gBACvB,0DAAW;gBACX,+DAAc;aACf;YACD,SAAS,EAAE;gBACT,uEAAa;gBACb,EAAC,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,4EAAe,EAAC;gBACrD,kFAAkB;aACnB;YACD,eAAe,EAAE;gBACf,kGAAuB;aACxB;YACD,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;AC1CtB,mB;;;;;;;;;;;ACAA,yCAAyC,wBAAwB,q2D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACL;AACK;AACK;AACJ;AAEpB;AAQ9C;IAME,iCACS,QAAqB,EACpB,WAA+B,EACP,IAAc;QAFvC,aAAQ,GAAR,QAAQ,CAAa;QACpB,gBAAW,GAAX,WAAW,CAAoB;QACP,SAAI,GAAJ,IAAI,CAAU;QAPhD,iBAAY,GAAY,KAAK,CAAC;QAErB,oBAAe,GAAoB,IAAI,uEAAe,CAAC,UAAU,EAAE,IAAI,6EAAiB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAO7G,8BAA8B;QAC9B,6BAA6B;IAC/B,CAAC;IAEO,sDAAoB,GAA5B;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,iBAAiB,KAAK,IAAI,CAAC,CAAC,CAAC;YACpD,IAAI,CAAC,eAAe,CAAC,iBAAiB,GAAG,IAAI,6EAAiB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC7E,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,GAAG,GAAG,EAAE,CAAC;YAChD,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC;YACnD,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,KAAK,GAAG,EAAE,CAAC;QACpD,CAAC;IACH,CAAC;IAED,gDAAc,GAAd;QAAA,iBAYC;QAXC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC;YACrB,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,KAAK,GAAG,IAAI,CAAC;QAEtD,IAAI,CAAC,WAAW,CAAC,cAAc,CAC7B,IAAI,CAAC,eAAe,CAAC,iBAAiB,EACtC,UAAC,IAAI;YACH,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,yBAAyB,CAAC,CAAC,EAAE,MAAM,EAAE;gBAC/K,QAAQ,EAAE,IAAI;aACf,CAAC,CAAC;QACL,CAAC,CACF,CAAC;IACJ,CAAC;IAED,8CAAY,GAAZ,UAAa,KAAK;QAChB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,KAAK,KAAK,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,KAAK,GAAG,IAAI,CAAC;QACtD,CAAC;IACH,CAAC;IAED,6CAAW,GAAX;QAAA,iBAYC;QAXC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,KAAK,KAAK,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,KAAK,GAAG,IAAI,CAAC;QACtD,CAAC;QAID,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,EAAE,UAAC,IAAI;YACtD,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,uBAAuB,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE;gBACjG,QAAQ,EAAE,IAAI;aACf,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,4CAAU,GAAV;QAAA,iBAOC;QANC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,EAAE,UAAC,IAAI;YACxD,KAAI,CAAC,oBAAoB,EAAE,CAAC;YAC5B,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,uBAAuB,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE;gBACnG,QAAQ,EAAE,IAAI;aACf,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,0CAAQ,GAAR;QAAA,iBAgBC;QAfC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,UAAC,IAAoC;YACrF,KAAI,CAAC,eAAe,GAAG,IAAI,uEAAe,CACxC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAClB,IAAI,6EAAiB,CACnB,IAAI,CAAC,QAAQ,CAAC,EAAE,EAChB,IAAI,CAAC,QAAQ,CAAC,GAAG,EACjB,IAAI,CAAC,QAAQ,CAAC,MAAM,EACpB,IAAI,CAAC,QAAQ,CAAC,KAAK,CACpB,CACF,CAAC;YAEF,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC/D,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YAC3B,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAjFQ;QAAR,2DAAK,EAAE;kCAAkB,uEAAe;oEAAsE;IAJpG,uBAAuB;QALnC,+DAAS,CAAC;YACT,QAAQ,EAAE,qBAAqB;;;SAGhC,CAAC;QAUG,uEAAM,CAAC,iEAAe,CAAC;yCAFP,6DAAW;YACP,iFAAkB;YACD,yDAAQ;OATrC,uBAAuB,CAsFnC;IAAD,8BAAC;CAAA;AAtFmC;;;;;;;;;;;;ACdpC,sCAAsC,uBAAuB,KAAK,wBAAwB,wBAAwB,4BAA4B,KAAK,8BAA8B,sCAAsC,2BAA2B,yBAAyB,KAAK,wBAAwB,qBAAqB,oBAAoB,KAAK,K;;;;;;;;;;;ACAtV,mJAAmJ,iBAAiB,uKAAuK,eAAe,8M;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAzR;AACnB;AAEgC;AACS;AAC5B;AACW;AAOtE;IACE,2BACU,MAAiB,EACjB,WAA+B;QAD/B,WAAM,GAAN,MAAM,CAAW;QACjB,gBAAW,GAAX,WAAW,CAAoB;IAGzC,CAAC;IAID,sCAAU,GAAV,UAAW,MAAc;QAAzB,iBAgBC;QAfC,sEAAa,CAAC,GAAG,CAAC,kBAAkB,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC;QAElE,IAAM,YAAY,GAAG,IAAI,iEAAe,EAAE,CAAC;QAE3C,YAAY,CAAC,YAAY,GAAG,KAAK,CAAC;QAClC,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC;QAC9B,YAAY,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;QAClC,YAAY,CAAC,KAAK,GAAG,OAAO,CAAC;QAE7B,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kGAAuB,EAAE,YAAY,CAAC,CAAC;QACrE,MAAM,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,WAAC;YAC9B,KAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,MAAM,EAAE,UAAC,IAAI;gBAC/C,KAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;YACvC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,oCAAQ,GAAR;QACE,IAAI,CAAC,WAAW,CAAC,iBAAiB,GAAG;YACnC,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAxBQ;QAAR,2DAAK,EAAE;kCAAW,yDAAQ;uDAAC;IARjB,iBAAiB;QAL7B,+DAAS,CAAC;YACT,QAAQ,EAAE,cAAc;;;SAGzB,CAAC;yCAGkB,2DAAS;YACJ,iFAAkB;OAH9B,iBAAiB,CAkC7B;IAAD,wBAAC;CAAA;AAlC6B;;;;;;;;;;;;ACb9B,mB;;;;;;;;;;;ACAA,yf;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AAEoB;AAGtB;AAC8B;AAO9E;IAKE,4BACU,YAAgC,EAChC,eAAuC,EACxC,QAAqB;QAH9B,iBAoBC;QAnBS,iBAAY,GAAZ,YAAY,CAAoB;QAChC,oBAAe,GAAf,eAAe,CAAwB;QACxC,aAAQ,GAAR,QAAQ,CAAa;QAE5B,YAAY,CAAC,iBAAiB,GAAG;YAC/B,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,qBAAqB,EAAE,MAAM,EAAE;gBAChD,QAAQ,EAAE,IAAI;aACf,CAAC,CAAC;YAEH,KAAI,CAAC,YAAY,CAAC,uBAAuB,CAAC,UAAC,IAAyC;gBAClF,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC;YACjC,CAAC,CAAC,CAAC;QACL,CAAC;QAED,YAAY,CAAC,eAAe,GAAG;YAC7B,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,2BAA2B,EAAE,OAAO,EAAE;gBACvD,QAAQ,EAAE,IAAI;aACf,CAAC,CAAC;QACL,CAAC,CAAC;IACJ,CAAC;IAED,qCAAQ,GAAR;QACE,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC;IA7BU,kBAAkB;QAL9B,+DAAS,CAAC;YACT,QAAQ,EAAE,eAAe;;;SAG1B,CAAC;yCAOwB,iFAAkB;YACf,yFAAsB;YAC9B,6DAAW;OARnB,kBAAkB,CA8B9B;IAAD,yBAAC;CAAA;AA9B8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbU;AACiE;AACrD;AACH;AACK;AACE;AACL;AACkB;AACN;AACT;AAiCvD;IAAA;IAA8B,CAAC;IAAlB,cAAc;QA9B1B,8DAAQ,CAAC;YACN,OAAO,EACH;gBACI,iEAAe;gBACf,kEAAgB;gBAChB,+DAAa;gBACb,oEAAa;gBACb,sEAAc;gBACd,iEAAe;gBACf,oEAAkB;gBAClB,gEAAc;gBACd,mFAAoB;gBACpB,6EAAiB;gBACjB,oEAAa;aAChB;YACL,OAAO,EACH;gBACI,iEAAe;gBACf,kEAAgB;gBAChB,+DAAa;gBACb,oEAAa;gBACb,sEAAc;gBACd,iEAAe;gBACf,oEAAkB;gBAClB,gEAAc;gBACd,mFAAoB;gBACpB,6EAAiB;gBACjB,oEAAa;aAChB;SACR,CAAC;OACW,cAAc,CAAI;IAAD,qBAAC;CAAA;AAAJ;;;;;;;;;;;;;;ACzC3B;AAAA;IAEI,kBACW,IAAY,EACZ,EAAU,EACV,OAAwB;QAAxB,yCAAwB;QAFxB,SAAI,GAAJ,IAAI,CAAQ;QACZ,OAAE,GAAF,EAAE,CAAQ;QACV,YAAO,GAAP,OAAO,CAAiB;IAChC,CAAC;IACR,eAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRqC;AAGtC;IAAqC,mCAAQ;IACzC,yBACI,KAAa,EACN,iBAAoC;QAF/C,YAII,kBAAM,KAAK,EAAE,iBAAiB,CAAC,UAAU,CAAC,SAC7C;QAHU,uBAAiB,GAAjB,iBAAiB,CAAmB;;IAG/C,CAAC;IACL,sBAAC;AAAD,CAAC,CAPoC,kDAAQ,GAO5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRD;IAAA;IAQA,CAAC;IALG,+BAAS,GAAT;QACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,UAAC,GAAG,EAAE,KAAK;YACnC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,GAAG,KAAM,uBAAuB,CAAC;gBAAC,MAAM,CAAC,KAAK,CAAC;QACzE,CAAC,CAAC,CAAC;IACP,CAAC;IACL,kBAAC;AAAD,CAAC;;AAED;IAAiD,sCAAW;IACxD;QAAA,YACI,iBAAO,SAGV;QADG,KAAI,CAAC,qBAAqB,GAAG,KAAI,CAAC,2BAA2B,EAAE,CAAC;;IACpE,CAAC;IAIL,yBAAC;AAAD,CAAC,CATgD,WAAW,GAS3D;;AAED;IAAkD,uCAAW;IAA7D;;IAEA,CAAC;IAAD,0BAAC;AAAD,CAAC,CAFiD,WAAW,GAE5D;;AAED;IAAqD,0CAAmB;IAAxE;;IAGA,CAAC;IAAD,6BAAC;AAAD,CAAC,CAHoD,mBAAmB,GAGvE;;AAED;IAAwC,sCAAW;IAAnD;QAAA,qEAKC;QAJG,WAAK,GAAW,kBAAkB,CAAC,IAAI,CAAC;;IAI5C,CAAC;IAAD,yBAAC;AAAD,CAAC,CALuC,WAAW,GAKlD;;AAED;IAAiD,+CAAW;IAA5D;QAAA,qEAEC;QADG,WAAK,GAAW,2CAA2C,CAAC;;IAChE,CAAC;IAAD,kCAAC;AAAD,CAAC,CAFgD,WAAW,GAE3D;;AACD;IAAkD,gDAAmB;IAArE;QAAA,qEAIC;QAHG,WAAK,GAAW,4CAA4C,CAAC;;IAGjE,CAAC;IAAD,mCAAC;AAAD,CAAC,CAJiD,mBAAmB,GAIpE;;AAED;IAAwD,sDAAkB;IAA1E;QAAA,qEAMC;QADG,WAAK,GAAW,kDAAkD,CAAC;;IACvE,CAAC;IALG,wEAA2B,GAA3B;QACI,MAAM,CAAC,IAAI,mCAAmC,EAAE,CAAC;IACrD,CAAC;IAGL,yCAAC;AAAD,CAAC,CANuD,kBAAkB,GAMzE;;AACD;IAAyD,uDAAmB;IAA5E;QAAA,qEAIC;QAHG,WAAK,GAAW,mDAAmD,CAAC;;IAGxE,CAAC;IAAD,0CAAC;AAAD,CAAC,CAJwD,mBAAmB,GAI3E;;AAED;IAAsD,oDAAkB;IAAxE;QAAA,qEAOC;QAFG,WAAK,GAAW,gDAAgD,CAAC;;IAErE,CAAC;IANG,sEAA2B,GAA3B;QACI,MAAM,CAAC,IAAI,iCAAiC,EAAE,CAAC;IACnD,CAAC;IAIL,uCAAC;AAAD,CAAC,CAPqD,kBAAkB,GAOvE;;AACD;IAAuD,qDAAsB;IAA7E;QAAA,qEAEC;QADG,WAAK,GAAW,iDAAiD,CAAC;;IACtE,CAAC;IAAD,wCAAC;AAAD,CAAC,CAFsD,sBAAsB,GAE5E;;AAED;IAAmD,iDAAkB;IAQjE,uCACI,EAAU;QADd,YAGI,iBAAO,SAGV;QATD,WAAK,GAAW,6CAA6C,CAAC;QAQ1D,KAAI,CAAC,EAAE,GAAG,EAAE,CAAC;;IACjB,CAAC;IAbD,mEAA2B,GAA3B;QACI,MAAM,CAAC,IAAI,8BAA8B,EAAE,CAAC;IAChD,CAAC;IAYL,oCAAC;AAAD,CAAC,CAfkD,kBAAkB,GAepE;;AACD;IAAoD,kDAAmB;IAAvE;QAAA,qEAUC;QATG,WAAK,GAAW,8CAA8C,CAAC;;IASnE,CAAC;IAAD,qCAAC;AAAD,CAAC,CAVmD,mBAAmB,GAUtE;;AAED;IAAoD,kDAAkB;IAAtE;QAAA,qEAUC;QALG,WAAK,GAAW,8CAA8C,CAAC;;IAKnE,CAAC;IATG,oEAA2B,GAA3B;QACI,MAAM,CAAC,IAAI,+BAA+B,EAAE,CAAC;IACjD,CAAC;IAOL,qCAAC;AAAD,CAAC,CAVmD,kBAAkB,GAUrE;;AACD;IAAqD,mDAAsB;IAA3E;QAAA,qEAEC;QADG,WAAK,GAAW,+CAA+C,CAAC;;IACpE,CAAC;IAAD,sCAAC;AAAD,CAAC,CAFoD,sBAAsB,GAE1E;;AAED;IAAkD,gDAAkB;IAApE;QAAA,qEAWC;QANG,WAAK,GAAW,4CAA4C,CAAC;;IAMjE,CAAC;IAVG,kEAA2B,GAA3B;QACI,MAAM,CAAC,IAAI,6BAA6B,EAAE,CAAC;IAC/C,CAAC;IAQL,mCAAC;AAAD,CAAC,CAXiD,kBAAkB,GAWnE;;AACD;IAAmD,iDAAsB;IAAzE;QAAA,qEAEC;QADG,WAAK,GAAW,6CAA6C,CAAC;;IAClE,CAAC;IAAD,oCAAC;AAAD,CAAC,CAFkD,sBAAsB,GAExE;;AAED;IAAmD,iDAAkB;IAArE;QAAA,qEAOC;QAFG,WAAK,GAAW,6CAA6C,CAAC;;IAElE,CAAC;IANG,mEAA2B,GAA3B;QACI,MAAM,CAAC,IAAI,8BAA8B,EAAE,CAAC;IAChD,CAAC;IAIL,oCAAC;AAAD,CAAC,CAPkD,kBAAkB,GAOpE;;AACD;IAAoD,kDAAsB;IAA1E;QAAA,qEAEC;QADG,WAAK,GAAW,8CAA8C,CAAC;;IACnE,CAAC;IAAD,qCAAC;AAAD,CAAC,CAFmD,sBAAsB,GAEzE;;AAED;IAAgD,8CAAW;IAA3D;QAAA,qEAEC;QADG,WAAK,GAAW,0BAA0B,CAAC,IAAI,CAAC;;IACpD,CAAC;IAAD,iCAAC;AAAD,CAAC,CAF+C,WAAW,GAE1D;;AACD;IAAA;IAIA,CAAC;IAAD,kCAAC;AAAD,CAAC;;;;;;;;;;;;;;;ACtJD;AAAA;IACI,2BACW,UAAkB,EAClB,GAAW,EACX,MAAc,EACd,KAAc;QAHd,eAAU,GAAV,UAAU,CAAQ;QAClB,QAAG,GAAH,GAAG,CAAQ;QACX,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAS;IACpB,CAAC;IACV,wBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;ACPD,IAAY,WAGX;AAHD,WAAY,WAAW;IACnB,6DAAgB;IAChB,uDAAa;AACjB,CAAC,EAHW,WAAW,KAAX,WAAW,QAGtB;;;;;;;;;;;;;;;;;;;;;;ACJmD;AAMpD;IAAA;IAcA,CAAC;IAZC,8BAAS,GAAT,UAAU,KAAU,EAAE,IAAU;QAC9B,IAAI,SAAS,GAAG,KAAmB,CAAC;QACpC,IAAI,YAAY,GAAG,IAAI,CAAC;QAExB,EAAE,CAAC,CAAC,YAAY,KAAK,SAAS,IAAI,CAAC,YAAY,KAAK,SAAS,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;YAC1F,MAAM,CAAC,SAAS,CAAC;QAEnB,EAAE,CAAC,CAAC,YAAY,KAAK,SAAS,CAAC;YAC7B,YAAY,GAAG,YAAY,CAAC,WAAW,EAAE,CAAC;QAE5C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,kBAAQ,IAAI,eAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAxD,CAAwD,CAAC,CAAC;IAChG,CAAC;IAbU,UAAU;QAHtB,0DAAI,CAAC;YACJ,IAAI,EAAE,QAAQ;SACf,CAAC;OACW,UAAU,CActB;IAAD,iBAAC;CAAA;AAdsB;;;;;;;;;;;;;;;;;;;;;;ACNoB;AAK3C;IAHA;QAIU,UAAK,GAAG,IAAI,CAAC;IAQvB,CAAC;IANC,yCAAQ,GAAR,UAAS,MAAc,EAAE,MAAkB;QACzC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC;YACtB,MAAM,EAAE,CAAC;QACX,CAAC,EAAE,MAAM,CAAC,CAAC;IACb,CAAC;IARU,sBAAsB;QAHlC,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;OACW,sBAAsB,CASlC;IAAD,6BAAC;CAAA;AATkC;;;;;;;;;;;;;;;;;;;;;;;;;ACLQ;AAK3C;IAEE;IAAgB,CAAC;IAEV,iBAAG,GAAV,UAAW,OAAe;QACxB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACvB,CAAC;IAEM,oBAAM,GAAb,UAAc,MAAW;QACvB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACtB,CAAC;IAVU,aAAa;QAHzB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;;OACW,aAAa,CAWzB;IAAD,oBAAC;CAAA;AAXyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLyB;AAEF;AACI;AAC0e;AAQ/hB;IAEI,4BAA6C,YAA2B;QAA3B,iBAAY,GAAZ,YAAY,CAAe;QAKhE,cAAS,GAAuB,EAAE,CAAC;QAE3C,0CAA0C;QAC1C,sBAAiB,GAAe,IAAI,CAAC;QACrC,uBAAkB,GAAe,IAAI,CAAC;QACtC,oBAAe,GAAe,IAAI,CAAC;QAEnC,gBAAW,GAAgB,gEAAW,CAAC,YAAY,CAAC;IAZwB,CAAC;IAc7E,cAAc;IAEd,oCAAO,GAAP;QAAA,iBAuCC;QAtCG,6DAAa,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QAE5C,IAAI,CAAC,YAAY,CAAC,iBAAiB,GAAG;YAClC,6DAAa,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;YACpD,KAAI,CAAC,WAAW,GAAG,gEAAW,CAAC,SAAS,CAAC;YAEzC,EAAE,CAAC,CAAC,KAAI,CAAC,iBAAiB,KAAK,IAAI,CAAC,CAAC,CAAC;gBAClC,KAAI,CAAC,iBAAiB,EAAE,CAAC;YAC7B,CAAC;QACL,CAAC,CAAC;QAEF,IAAI,CAAC,YAAY,CAAC,cAAc,GAAG,UAAC,IAAS;YACzC,IAAI,QAAQ,GAAwB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE1D,EAAE,CAAC,CAAC,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC;gBAC9C,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC;gBACzC,OAAO,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC1C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,mCAAmC,GAAG,QAAQ,CAAC,KAAK,CAAC;YAC/D,CAAC;QACL,CAAC,CAAC;QAEF,IAAI,CAAC,YAAY,CAAC,kBAAkB,GAAG;YACnC,6DAAa,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;YACxC,KAAI,CAAC,WAAW,GAAG,gEAAW,CAAC,YAAY,CAAC;YAE5C,EAAE,CAAC,CAAC,KAAI,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC,CAAC;gBACnC,KAAI,CAAC,kBAAkB,EAAE,CAAC;YAC9B,CAAC;QACL,CAAC,CAAC;QAEF,IAAI,CAAC,YAAY,CAAC,eAAe,GAAG;YAChC,EAAE,CAAC,CAAC,KAAI,CAAC,eAAe,KAAK,IAAI,CAAC,CAAC,CAAC;gBAChC,KAAI,CAAC,eAAe,EAAE,CAAC;YAC3B,CAAC;QACL,CAAC,CAAC;QAEF,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;IACtD,CAAC;IAED,oBAAoB;IAEZ,wCAAW,GAAnB,UAAoB,IAAY,EAAE,QAAyB;QACvD,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IAEO,+CAAkB,GAA1B,UAA2B,IAAwB,EAAE,QAAyB;QAC1E,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;QAE5D,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,QAAQ,CAAC,CAAC;IACjD,CAAC;IAED,sBAAsB;IAEtB,iCAAI,GAAJ;QACI,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAED,oDAAuB,GAAvB,UAAwB,QAA6D;QACjF,IAAI,CAAC,GAAG,IAAI,mFAAkC,EAAE,CAAC;QAEjD,IAAI,CAAC,kBAAkB,CAAC,IAAI,mFAAkC,EAAE,EAAE,QAAQ,CAAC,CAAC;IAChF,CAAC;IAED,+CAAkB,GAAlB,UAAmB,MAAc,EAAE,QAAwD;QACvF,IAAI,CAAC,kBAAkB,CAAC,IAAI,8EAA6B,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,CAAC;IACjF,CAAC;IAED,+CAAkB,GAAlB,UAAmB,MAAc,EAAE,QAAwD;QACvF,IAAI,GAAG,GAAG,IAAI,8EAA6B,EAAE,CAAC;QAC9C,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC;QAEhB,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC;IAED,wCAAW,GAAX,UAAY,eAAgC,EAAE,QAAyD;QACnG,IAAI,GAAG,GAAG,IAAI,+EAA8B,EAAE,CAAC;QAC/C,GAAG,CAAC,EAAE,GAAG,eAAe,CAAC,iBAAiB,CAAC,UAAU,CAAC;QACtD,GAAG,CAAC,GAAG,GAAG,eAAe,CAAC,iBAAiB,CAAC,GAAG,CAAC;QAChD,GAAG,CAAC,MAAM,GAAG,eAAe,CAAC,iBAAiB,CAAC,MAAM,CAAC;QACtD,GAAG,CAAC,KAAK,GAAG,eAAe,CAAC,iBAAiB,CAAC,KAAK,CAAC;QAEpD,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC;IAED,uCAAU,GAAV,UAAW,UAAkB,EAAE,QAA2D;QACtF,IAAI,GAAG,GAAG,IAAI,iFAAgC,EAAE,CAAC;QACjD,GAAG,CAAC,EAAE,GAAG,UAAU,CAAC;QAEpB,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC;IAED,2CAAc,GAAd,UAAe,iBAAoC,EAAE,QAAuD;QACxG,IAAI,GAAG,GAAG,IAAI,6EAA4B,EAAE,CAAC;QAC7C,GAAG,CAAC,EAAE,GAAG,iBAAiB,CAAC,UAAU,CAAC;QACtC,GAAG,CAAC,GAAG,GAAG,iBAAiB,CAAC,GAAG,CAAC;QAChC,GAAG,CAAC,MAAM,GAAG,iBAAiB,CAAC,MAAM,CAAC;QACtC,GAAG,CAAC,KAAK,GAAG,iBAAiB,CAAC,KAAK,CAAC;QAEpC,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC;IAvHQ,kBAAkB;QAH9B,gEAAU,CAAC;YACR,UAAU,EAAE,MAAM;SACrB,CAAC;QAGe,uEAAM,CAAC,eAAe,CAAC;;OAF3B,kBAAkB,CAwH9B;IAAD,yBAAC;CAAA;AAxH8B;;;;;;;;;;;;;;;;;;;;;;;;;ACZY;AAO3C;IAGE;IAEA,CAAC;IAED,iCAAO,GAAP,UAAQ,IAAY;QAClB,IAAI,CAAC,EAAE,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,EAAE,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC;QACxC,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC;QACxC,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC;QAC1C,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC;IACzC,CAAC;IAED,+BAAK,GAAL,UAAM,IAAY;QAChB,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrB,CAAC;IAjBU,eAAe;QAH3B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;;OACW,eAAe,CAuB3B;IAAD,sBAAC;CAAA;AAvB2B;;;;;;;;;;;;ACP5B,oCAAoC,wBAAwB,mBAAmB,eAAe,KAAK,C;;;;;;;;;;;ACAnG,mEAAmE,OAAO,kC;;;;;;;;;;;;;;;;;;;;;;;;ACAxB;AAOlD;IAEE;QADA,UAAK,GAAW,eAAe,CAAC;IAChB,CAAC;IAEjB,mCAAQ,GAAR;IACA,CAAC;IALU,gBAAgB;QAL5B,+DAAS,CAAC;YACT,QAAQ,EAAE,aAAa;;;SAGxB,CAAC;;OACW,gBAAgB,CAO5B;IAAD,uBAAC;CAAA;AAP4B;;;;;;;;;;;;;;ACP7B;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;;;ACdjD;AAC6B;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\r\\n.tab-content {\\r\\n    overflow-y: auto;\\r\\n}\\r\\n\\r\\n.tab-chart {\\r\\n    height: 500px;\\r\\n}\\r\\n\\r\\n.mat-tab-group {\\r\\n    padding-top: 64px;\\r\\n}\\r\\n\\r\\n\\r\\n\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\r\\n\\r\\n<app-toolbar></app-toolbar>\\r\\n\\r\\n<mat-tab-group>\\r\\n    <mat-tab label=\\\"Exchanges\\\">\\r\\n        <div class=\\\"tab-content tab-exchanges\\\">\\r\\n            <app-exchanges></app-exchanges>\\r\\n        </div>\\r\\n\\r\\n    </mat-tab>\\r\\n    <mat-tab label=\\\"Chart\\\">\\r\\n        <div class=\\\"tab-content tab-chart\\\">\\r\\n            Hello\\r\\n        </div>\\r\\n    </mat-tab>\\r\\n</mat-tab-group>\"","import { Component, OnInit } from '@angular/core';\r\nimport { WsClientService } from './services/ws-client.service';\r\nimport { ISocketClient } from './models/interfaces/ISocketClient';\r\nimport { PrimeSocketService } from './services/prime-socket.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n  \r\n  private url = 'http://localhost:3001';\r\n  private socket;\r\n\r\n  constructor(private primeTcpClient: PrimeSocketService) {\r\n    \r\n  }\r\n\r\n  title = 'Prime.KeysManager';\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { NgModule } from '@angular/core';\r\nimport { MaterialModule } from \"./material.module\";\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { ExchangesComponent } from './exchanges/exchanges.component';\r\nimport { ToolbarComponent } from './toolbar/toolbar.component';\r\nimport { ExchangeComponent } from './exchange/exchange.component';\r\nimport { ExchangeDialogComponent } from './exchange-dialog/exchange-dialog.component';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LoggerService } from './services/logger.service';\r\nimport { WsClientService } from './services/ws-client.service';\r\nimport { PrimeSocketService } from './services/prime-socket.service';\r\nimport { FilterPipe } from './pipes/filter.pipe';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ExchangesComponent,\r\n    ToolbarComponent,\r\n    ExchangeComponent,\r\n    ExchangeDialogComponent,\r\n    FilterPipe\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    FormsModule,\r\n    MaterialModule,\r\n  ],\r\n  providers: [\r\n    LoggerService,\r\n    {provide: \"ISocketClient\", useClass: WsClientService},\r\n    PrimeSocketService,\r\n  ],\r\n  entryComponents: [\r\n    ExchangeDialogComponent\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"\"","module.exports = \"<h2 mat-dialog-title>{{ exchangeDetails.name }} details</h2>\\r\\n<mat-dialog-content>\\r\\n\\r\\n  <mat-form-field class=\\\"full-width\\\">\\r\\n    <input matInput [(ngModel)]=\\\"exchangeDetails.privateApiContext.key\\\" placeholder=\\\"Public Key\\\">\\r\\n    <button mat-button *ngIf=\\\"exchangeDetails.privateApiContext.key\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"exchangeDetails.privateApiContext.key=''\\\">\\r\\n      <mat-icon>close</mat-icon>\\r\\n    </button>\\r\\n  </mat-form-field>\\r\\n\\r\\n  <mat-form-field class=\\\"full-width\\\">\\r\\n    <input matInput type=\\\"password\\\" [(ngModel)]=\\\"exchangeDetails.privateApiContext.secret\\\" placeholder=\\\"Secret Key\\\">\\r\\n    <button mat-button *ngIf=\\\"exchangeDetails.privateApiContext.secret\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"exchangeDetails.privateApiContext.secret=''\\\">\\r\\n      <mat-icon>close</mat-icon>\\r\\n    </button>\\r\\n  </mat-form-field>\\r\\n\\r\\n  <mat-slide-toggle (change)=\\\"extraChanged($event)\\\" [(ngModel)]=\\\"extraEnabled\\\">Has Extra data</mat-slide-toggle>\\r\\n\\r\\n  <mat-form-field class=\\\"full-width\\\">\\r\\n    <input matInput [disabled]=\\\"!extraEnabled\\\" [(ngModel)]=\\\"exchangeDetails.privateApiContext.extra\\\" placeholder=\\\"Extra\\\">\\r\\n    <button mat-button *ngIf=\\\"exchangeDetails.privateApiContext.extra\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"exchangeDetails.privateApiContext.extra=''\\\">\\r\\n      <mat-icon>close</mat-icon>\\r\\n    </button>\\r\\n  </mat-form-field>\\r\\n\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n  <button mat-button [mat-dialog-close]=\\\"true\\\">Close</button>\\r\\n  <span class=\\\"fill-space\\\"></span>\\r\\n\\r\\n  <button mat-button (click)=\\\"testPrivateApi()\\\">Test Private API</button>\\r\\n  <button mat-button (click)=\\\"deleteKeys()\\\" color=\\\"warn\\\">Delete</button>\\r\\n  <button mat-raised-button color=\\\"primary\\\" [mat-dialog-close]=\\\"true\\\" (click)=\\\"saveApiKeys()\\\">Save</button>\\r\\n</mat-dialog-actions>\"","import { Component, OnInit, Input, Inject } from '@angular/core';\r\nimport { ExchangeDetails } from '../models/ExchangeDetails';\r\nimport { MatSnackBar, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { PrimeSocketService } from '../services/prime-socket.service';\r\nimport { PrivateApiContext } from '../models/private-api-context';\r\nimport { LoggerService } from '../services/logger.service';\r\nimport { Exchange } from '../models/Exchange';\r\nimport { ProviderDetailsResponseMessage } from '../models/messages';\r\n\r\n@Component({\r\n  selector: 'app-exchange-dialog',\r\n  templateUrl: './exchange-dialog.component.html',\r\n  styleUrls: ['./exchange-dialog.component.css']\r\n})\r\nexport class ExchangeDialogComponent implements OnInit {\r\n\r\n  extraEnabled: boolean = false;\r\n\r\n  @Input() exchangeDetails: ExchangeDetails = new ExchangeDetails(\"Provider\", new PrivateApiContext(\"\", \"\", \"\"));\r\n\r\n  constructor(\r\n    public snackBar: MatSnackBar,\r\n    private primeSocket: PrimeSocketService,\r\n    @Inject(MAT_DIALOG_DATA) public data: Exchange\r\n  ) {\r\n    //this.exchangeDetails = data;\r\n    //LoggerService.logObj(data);\r\n  }\r\n\r\n  private resetExchangeDetails() {\r\n    if (this.exchangeDetails.privateApiContext === null) {\r\n      this.exchangeDetails.privateApiContext = new PrivateApiContext(\"\", \"\", \"\");\r\n    }\r\n    else {\r\n      this.exchangeDetails.privateApiContext.key = \"\";\r\n      this.exchangeDetails.privateApiContext.secret = \"\";\r\n      this.exchangeDetails.privateApiContext.extra = \"\";\r\n    }\r\n  }\r\n\r\n  testPrivateApi() {\r\n    if (!this.extraEnabled)\r\n      this.exchangeDetails.privateApiContext.extra = null;\r\n\r\n    this.primeSocket.testPrivateApi(\r\n      this.exchangeDetails.privateApiContext,\r\n      (data) => {\r\n        this.snackBar.open((data.success ? \"API test succeeded\" : (data.message != \"\" && data.message != null ? \"API test error: \" + data.message : \"API test error occurred\")), \"Info\", {\r\n          duration: 3000\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  extraChanged(event) {\r\n    if (this.extraEnabled === false) {\r\n      this.exchangeDetails.privateApiContext.extra = null;\r\n    }\r\n  }\r\n\r\n  saveApiKeys() {\r\n    if (this.extraEnabled === false) {\r\n      this.exchangeDetails.privateApiContext.extra = null;\r\n    }\r\n\r\n    \r\n\r\n    this.primeSocket.saveApiKeys(this.exchangeDetails, (data) => {\r\n      this.snackBar.open((data.success ? \"Keys saved\" : \"Error during saving: \" + data.message), \"Info\", {\r\n        duration: 3000\r\n      });\r\n    });\r\n  }\r\n\r\n  deleteKeys() {\r\n    this.primeSocket.deleteKeys(this.exchangeDetails.id, (data) => {\r\n      this.resetExchangeDetails();\r\n      this.snackBar.open((data.success ? \"Keys deleted\" : \"Error during saving: \" + data.message), \"Info\", {\r\n        duration: 3000\r\n      });\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.primeSocket.getProviderDetails(this.data.id, (data: ProviderDetailsResponseMessage) => {\r\n      this.exchangeDetails = new ExchangeDetails(\r\n        data.response.name,\r\n        new PrivateApiContext(\r\n          data.response.id,\r\n          data.response.key,\r\n          data.response.secret,\r\n          data.response.extra\r\n        )\r\n      );\r\n\r\n      if (data.response.extra !== null && data.response.extra !== \"\") {\r\n        this.extraEnabled = true;\r\n      }\r\n    });\r\n  }\r\n}\r\n","module.exports = \"\\r\\n.exchange-card {\\r\\n    margin: 10px 0;\\r\\n}\\r\\n\\r\\n.header .title {\\r\\n    font-size: 25px;\\r\\n    margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.header .description {\\r\\n    color: rgba(0, 0, 0, 0.6)\\r\\n}\\r\\n\\r\\n.mat-card-actions {\\r\\n    margin-top: 10px;\\r\\n}\\r\\n\\r\\n.icon-has-keys {\\r\\n    float: right;\\r\\n    color: gray;\\r\\n}\\r\\n\"","module.exports = \"<mat-card class=\\\"exchange-card\\\">\\r\\n  <mat-card-content class=\\\"header\\\">\\r\\n    <mat-card-title class=\\\"title\\\">\\r\\n        {{ exchange.name }}\\r\\n        <mat-icon *ngIf=\\\"exchange.hasKeys\\\" class=\\\"icon-has-keys\\\">vpn_key</mat-icon>\\r\\n    </mat-card-title>\\r\\n    <mat-card-subtitle class=\\\"description\\\">{{ exchange.id }}</mat-card-subtitle>\\r\\n  </mat-card-content>\\r\\n  <mat-card-actions>\\r\\n    <button mat-button color=\\\"primary\\\" (click)=\\\"openDialog(exchange.id)\\\">MANAGE</button>\\r\\n  </mat-card-actions>\\r\\n</mat-card>\"","import { Component, OnInit, Input, Inject } from '@angular/core';\r\nimport { Exchange } from '../models/Exchange';\r\n\r\nimport {MatDialog, MatDialogConfig, MAT_DIALOG_DATA} from \"@angular/material\";\r\nimport { ExchangeDialogComponent } from '../exchange-dialog/exchange-dialog.component';\r\nimport { LoggerService } from '../services/logger.service';\r\nimport { PrimeSocketService } from '../services/prime-socket.service';\r\n\r\n@Component({\r\n  selector: 'app-exchange',\r\n  templateUrl: './exchange.component.html',\r\n  styleUrls: ['./exchange.component.css']\r\n})\r\nexport class ExchangeComponent implements OnInit {\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private primeSocket: PrimeSocketService\r\n  ) { \r\n\r\n  }\r\n\r\n  @Input() exchange: Exchange;\r\n\r\n  openDialog(idHash: string) {\r\n    LoggerService.log(\"Opening dialog (\" + this.exchange.id + \")...\");\r\n\r\n    const dialogConfig = new MatDialogConfig();\r\n\r\n    dialogConfig.disableClose = false;\r\n    dialogConfig.autoFocus = true;\r\n    dialogConfig.data = this.exchange;\r\n    dialogConfig.width = \"535px\";\r\n\r\n    let dialog = this.dialog.open(ExchangeDialogComponent, dialogConfig);\r\n    dialog.beforeClose().subscribe(r => {\r\n      this.primeSocket.checkProvidersKeys(idHash, (data) => {\r\n        this.exchange.hasKeys = data.success;\r\n      });\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.primeSocket.onClientConnected = () => {\r\n      console.log(\"Overried connection\");\r\n    }\r\n  }\r\n\r\n}\r\n\r\n","module.exports = \"\"","module.exports = \"<mat-form-field class=\\\"full-width exchange-search\\\">\\r\\n    <input matInput type=\\\"text\\\" placeholder=\\\"Search exchange\\\" [(ngModel)]=\\\"exchangeFilter\\\" />\\r\\n    <button mat-button *ngIf=\\\"exchangeFilter\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"exchangeFilter=''\\\">\\r\\n        <mat-icon>close</mat-icon>\\r\\n    </button>\\r\\n</mat-form-field>\\r\\n\\r\\n<app-exchange *ngFor=\\\"let exchange of (exchanges | filter: exchangeFilter)\\\" [exchange]=\\\"exchange\\\"></app-exchange>\"","import { Component, OnInit } from '@angular/core';\r\nimport { Exchange } from '../models/Exchange';\r\nimport { PrimeSocketService } from '../services/prime-socket.service';\r\nimport { PrivateProvidersListResponseMessage } from '../models/messages';\r\nimport { LoggerService } from '../services/logger.service';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { ActionThrottlerService } from '../services/action-throttler.service';\r\n\r\n@Component({\r\n  selector: 'app-exchanges',\r\n  templateUrl: './exchanges.component.html',\r\n  styleUrls: ['./exchanges.component.css']\r\n})\r\nexport class ExchangesComponent implements OnInit {\r\n\r\n  exchanges: Exchange[];\r\n  exchangeFilter: string;\r\n\r\n  constructor(\r\n    private primeService: PrimeSocketService,\r\n    private actionThrottler: ActionThrottlerService,\r\n    public snackBar: MatSnackBar,\r\n  ) { \r\n    primeService.onClientConnected = () => {\r\n      this.snackBar.open(\"Connected to server\", \"Info\", {\r\n        duration: 3000\r\n      });\r\n\r\n      this.primeService.getPrivateProvidersList((data: PrivateProvidersListResponseMessage) => {\r\n        this.exchanges = data.response;\r\n      });\r\n    }\r\n\r\n    primeService.onErrorOccurred = () => {\r\n      this.snackBar.open(\"Connection error occurred\", \"Error\", {\r\n        duration: 3000\r\n      });\r\n    };\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.primeService.connect();\r\n  }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { MatButtonModule, MatDialogContent, MatFormFieldModule, MatInputModule } from \"@angular/material\";\r\nimport { MatToolbarModule } from \"@angular/material\";\r\nimport { MatTabsModule } from \"@angular/material\";\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatDialogModule } from \"@angular/material\";\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n\r\n@NgModule({\r\n    imports:\r\n        [\r\n            MatButtonModule,\r\n            MatToolbarModule,\r\n            MatTabsModule,\r\n            MatCardModule,\r\n            MatBadgeModule,\r\n            MatDialogModule,\r\n            MatFormFieldModule,\r\n            MatInputModule,\r\n            MatSlideToggleModule,\r\n            MatSnackBarModule,\r\n            MatIconModule\r\n        ],\r\n    exports:\r\n        [\r\n            MatButtonModule,\r\n            MatToolbarModule,\r\n            MatTabsModule,\r\n            MatCardModule,\r\n            MatBadgeModule,\r\n            MatDialogModule,\r\n            MatFormFieldModule,\r\n            MatInputModule,\r\n            MatSlideToggleModule,\r\n            MatSnackBarModule,\r\n            MatIconModule\r\n        ],\r\n})\r\nexport class MaterialModule { }\r\n","\r\nexport class Exchange {\r\n    \r\n    constructor(\r\n        public name: string,\r\n        public id: string,\r\n        public hasKeys: boolean = false\r\n    ) {}\r\n}\r\n","import { Exchange } from \"./Exchange\";\r\nimport { PrivateApiContext } from \"./private-api-context\";\r\n\r\nexport class ExchangeDetails extends Exchange {\r\n    constructor(\r\n        title: string,\r\n        public privateApiContext: PrivateApiContext\r\n    ) {\r\n        super(title, privateApiContext.exchangeId);\r\n    }\r\n}\r\n","import { Exchange } from \"./Exchange\";\r\n\r\nexport abstract class BaseMessage {\r\n    abstract $type: string;\r\n\r\n    serialize(): string {\r\n        return JSON.stringify(this, (key, value) => {\r\n            if (value !== null && key !==  \"expectedEmptyResponse\") return value;\r\n        });\r\n    }\r\n}\r\n\r\nexport abstract class BaseRequestMessage extends BaseMessage {\r\n    constructor() {\r\n        super();\r\n\r\n        this.expectedEmptyResponse = this.createExpectedEmptyResponse();\r\n    }\r\n\r\n    abstract createExpectedEmptyResponse(): BaseMessage;\r\n    expectedEmptyResponse: BaseMessage;\r\n}\r\n\r\nexport abstract class BaseResponseMessage extends BaseMessage {\r\n    sessionId: string;\r\n}\r\n\r\nexport abstract class BooleanResponseMessage extends BaseResponseMessage {\r\n    success: boolean;\r\n    message: string;\r\n}\r\n\r\nexport class UserMessageRequest extends BaseMessage {\r\n    $type: string = UserMessageRequest.name;\r\n\r\n    UserName: string;\r\n    Age: string;\r\n}\r\n\r\nexport class ProvidersListRequestMessage extends BaseMessage {\r\n    $type: string = \"prime.manager.providerslistrequestmessage\";\r\n}\r\nexport class ProvidersListResponseMessage extends BaseResponseMessage {\r\n    $type: string = \"prime.manager.providerslistresponsemessage\";\r\n\r\n    response: Exchange[];\r\n}\r\n\r\nexport class PrivateProvidersListRequestMessage extends BaseRequestMessage {\r\n    createExpectedEmptyResponse(): BaseMessage {\r\n        return new PrivateProvidersListResponseMessage();\r\n    }\r\n\r\n    $type: string = \"prime.manager.privateproviderslistrequestmessage\";\r\n}\r\nexport class PrivateProvidersListResponseMessage extends BaseResponseMessage {\r\n    $type: string = \"prime.manager.privateproviderslistresponsemessage\";\r\n\r\n    response: Exchange[];\r\n}\r\n\r\nexport class DeleteProviderKeysRequestMessage extends BaseRequestMessage {\r\n    createExpectedEmptyResponse(): BaseMessage {\r\n        return new DeleteProviderKeysResponseMessage();\r\n    }\r\n\r\n    $type: string = \"prime.manager.deleteproviderkeysrequestmessage\";\r\n    id: string;\r\n}\r\nexport class DeleteProviderKeysResponseMessage extends BooleanResponseMessage {\r\n    $type: string = \"prime.manager.deleteproviderkeysresponsemessage\";\r\n}\r\n\r\nexport class ProviderDetailsRequestMessage extends BaseRequestMessage {\r\n    createExpectedEmptyResponse(): BaseMessage {\r\n        return new ProviderDetailsResponseMessage();\r\n    }\r\n\r\n    $type: string = \"prime.manager.providerdetailsrequestmessage\";\r\n    id: string;\r\n\r\n    constructor(\r\n        id: string\r\n    ) {\r\n        super();\r\n\r\n        this.id = id;\r\n    }\r\n}\r\nexport class ProviderDetailsResponseMessage extends BaseResponseMessage {\r\n    $type: string = \"prime.manager.providerdetailsresponsemessage\";\r\n\r\n    response: {\r\n        extra: string;\r\n        id: string;\r\n        key: string;\r\n        name: string;\r\n        secret: string;\r\n    }\r\n}\r\n\r\nexport class ProviderSaveKeysRequestMessage extends BaseRequestMessage {\r\n    createExpectedEmptyResponse(): BaseMessage {\r\n        return new ProviderSaveKeysResponseMessage();\r\n    }\r\n\r\n    $type: string = \"prime.manager.providersavekeysrequestmessage\";\r\n    id: string;\r\n    key: string;\r\n    secret: string;\r\n    extra: string\r\n}\r\nexport class ProviderSaveKeysResponseMessage extends BooleanResponseMessage {\r\n    $type: string = \"prime.manager.providersavekeysresponsemessage\";\r\n}\r\n\r\nexport class TestPrivateApiRequestMessage extends BaseRequestMessage {\r\n    createExpectedEmptyResponse(): BaseMessage {\r\n        return new TestPrivateApiResponseMessage();\r\n    }\r\n\r\n    $type: string = \"prime.manager.testprivateapirequestmessage\";\r\n\r\n    id: string;\r\n    key: string;\r\n    secret: string;\r\n    extra: string;\r\n}\r\nexport class TestPrivateApiResponseMessage extends BooleanResponseMessage {\r\n    $type: string = \"prime.manager.testprivateapiresponsemessage\";\r\n}\r\n\r\nexport class ProviderHasKeysRequestMessage extends BaseRequestMessage {\r\n    createExpectedEmptyResponse(): BaseMessage {\r\n        return new ProviderHasKeysResponseMessage();\r\n    }\r\n\r\n    $type: string = \"prime.manager.providerhaskeysrequestmessage\";\r\n    id: string;\r\n}\r\nexport class ProviderHasKeysResponseMessage extends BooleanResponseMessage {\r\n    $type: string = \"prime.manager.providerhaskeysresponsemessage\";\r\n}\r\n\r\nexport class ProviderKeysMessageRequest extends BaseMessage {\r\n    $type: string = ProviderKeysMessageRequest.name;\r\n}\r\nexport class ProviderKeysMessageResponse {\r\n    Id: string;\r\n    Key: string;\r\n    Extra: string;\r\n}\r\n\r\n\r\n","\r\nexport class PrivateApiContext {\r\n    constructor(\r\n        public exchangeId: string,\r\n        public key: string,\r\n        public secret: string,\r\n        public extra?: string\r\n    ) {  }\r\n}\r\n","\r\nexport enum SocketState {\r\n    Disconnected = 0,\r\n    Connected = 1,\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Exchange } from '../models/Exchange';\r\n\r\n@Pipe({\r\n  name: 'filter'\r\n})\r\nexport class FilterPipe implements PipeTransform {\r\n\r\n  transform(value: any, args?: any): any {\r\n    let exchanges = value as Exchange[];\r\n    let filterString = args;\r\n\r\n    if (filterString === undefined || (filterString !== undefined && filterString.length === 0))\r\n      return exchanges;\r\n\r\n    if (filterString !== undefined)\r\n      filterString = filterString.toLowerCase();\r\n\r\n    return exchanges.filter(exchange => exchange.name.toLowerCase().indexOf(filterString) !== -1);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActionThrottlerService {\r\n  private timer = null;\r\n\r\n  throttle(period: number, action: () => void) {\r\n    clearTimeout(this.timer);\r\n    this.timer = setTimeout(function () {\r\n      action();\r\n    }, period);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoggerService {\r\n\r\n  constructor() { }\r\n\r\n  static log(message: string) {\r\n    console.log(message);\r\n  }\r\n  \r\n  static logObj(object: any) {\r\n    console.log(object);\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { ISocketClient } from '../models/interfaces/ISocketClient';\r\nimport { LoggerService } from './logger.service';\r\nimport { SocketState } from '../models/socket-state';\r\nimport { ProvidersListRequestMessage, BaseMessage, TestPrivateApiRequestMessage, ProvidersListResponseMessage, ProviderDetailsResponseMessage, ProviderDetailsRequestMessage, ProviderSaveKeysRequestMessage, ProviderSaveKeysResponseMessage, PrivateProvidersListResponseMessage, PrivateProvidersListRequestMessage, DeleteProviderKeysResponseMessage, DeleteProviderKeysRequestMessage, TestPrivateApiResponseMessage, ProviderHasKeysResponseMessage, ProviderHasKeysRequestMessage, BaseRequestMessage, BaseResponseMessage } from '../models/messages';\r\nimport { PrivateApiContext } from '../models/private-api-context';\r\nimport { GetProviderDetailsMessage } from 'models/core/msgs/Messages';\r\nimport { ExchangeDetails } from '../models/ExchangeDetails';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PrimeSocketService {\r\n\r\n    constructor(@Inject(\"ISocketClient\") private socketClient: ISocketClient) { }\r\n\r\n    private responseBuffer: any[];\r\n    private dataHandlerChannel: string;\r\n\r\n    private callbacks: ((data) => void)[] = [];\r\n\r\n    // TODO: implement multiple subscriptions.\r\n    onClientConnected: () => void = null;\r\n    onConnectionClosed: () => void = null;\r\n    onErrorOccurred: () => void = null;\r\n\r\n    socketState: SocketState = SocketState.Disconnected;\r\n\r\n    // Connection.\r\n\r\n    connect() {\r\n        LoggerService.log(\"Starting TCP client...\");\r\n\r\n        this.socketClient.onClientConnected = () => {\r\n            LoggerService.log(\"Connected to Prime API server.\");\r\n            this.socketState = SocketState.Connected;\r\n\r\n            if (this.onClientConnected !== null) {\r\n                this.onClientConnected();\r\n            }\r\n        };\r\n\r\n        this.socketClient.onDataReceived = (data: any) => {\r\n            var response: BaseResponseMessage = JSON.parse(data.data);\r\n\r\n            if (this.callbacks[response.$type] != undefined) {\r\n                this.callbacks[response.$type](response);\r\n                delete this.callbacks[response.$type];\r\n            } else {\r\n                throw \"Callback method is not found for \" + response.$type;\r\n            }\r\n        };\r\n\r\n        this.socketClient.onConnectionClosed = () => {\r\n            LoggerService.log(\"Connection closed.\");\r\n            this.socketState = SocketState.Disconnected;\r\n\r\n            if (this.onConnectionClosed !== null) {\r\n                this.onConnectionClosed();\r\n            }\r\n        };\r\n\r\n        this.socketClient.onErrorOccurred = () => {\r\n            if (this.onErrorOccurred !== null) {\r\n                this.onErrorOccurred();\r\n            }\r\n        };\r\n\r\n        this.socketClient.connect('ws://127.0.0.1:9991/');\r\n    }\r\n\r\n    // Socket messaging.\r\n\r\n    private writeSocket(data: string, callback?: (data) => void) {\r\n        this.socketClient.write(data);\r\n    }\r\n\r\n    private writeSocketMessage(data: BaseRequestMessage, callback?: (data) => void) {\r\n        this.callbacks[data.expectedEmptyResponse.$type] = callback;\r\n        \r\n        this.writeSocket(data.serialize(), callback);\r\n    }\r\n\r\n    // Core logic methods.\r\n\r\n    test() {\r\n        this.writeSocket(\"Hello\");\r\n    }\r\n\r\n    getPrivateProvidersList(callback: (data: PrivateProvidersListResponseMessage) => void) {\r\n        let x = new PrivateProvidersListRequestMessage();\r\n\r\n        this.writeSocketMessage(new PrivateProvidersListRequestMessage(), callback);\r\n    }\r\n\r\n    getProviderDetails(idHash: string, callback: (data: ProviderDetailsResponseMessage) => void) {\r\n        this.writeSocketMessage(new ProviderDetailsRequestMessage(idHash), callback);\r\n    }\r\n\r\n    checkProvidersKeys(idHash: string, callback: (data: ProviderHasKeysResponseMessage) => void) {\r\n        let msg = new ProviderHasKeysRequestMessage();\r\n        msg.id = idHash;\r\n\r\n        this.writeSocketMessage(msg, callback);\r\n    }\r\n\r\n    saveApiKeys(exchangeDetails: ExchangeDetails, callback: (data: ProviderSaveKeysResponseMessage) => void) {\r\n        let msg = new ProviderSaveKeysRequestMessage();\r\n        msg.id = exchangeDetails.privateApiContext.exchangeId;\r\n        msg.key = exchangeDetails.privateApiContext.key;\r\n        msg.secret = exchangeDetails.privateApiContext.secret;\r\n        msg.extra = exchangeDetails.privateApiContext.extra;\r\n\r\n        this.writeSocketMessage(msg, callback);\r\n    }\r\n\r\n    deleteKeys(exchangeId: string, callback: (data: DeleteProviderKeysResponseMessage) => void) {\r\n        let msg = new DeleteProviderKeysRequestMessage();\r\n        msg.id = exchangeId;\r\n\r\n        this.writeSocketMessage(msg, callback);\r\n    }\r\n\r\n    testPrivateApi(privateApiContext: PrivateApiContext, callback: (data: TestPrivateApiResponseMessage) => void) {\r\n        var msg = new TestPrivateApiRequestMessage();\r\n        msg.id = privateApiContext.exchangeId;\r\n        msg.key = privateApiContext.key;\r\n        msg.secret = privateApiContext.secret;\r\n        msg.extra = privateApiContext.extra;\r\n\r\n        this.writeSocketMessage(msg, callback);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ISocketClient } from '../models/interfaces/ISocketClient';\r\nimport { LoggerService } from './logger.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WsClientService implements ISocketClient {\r\n  ws: WebSocket;\r\n\r\n  constructor() { \r\n    \r\n  }\r\n\r\n  connect(host: string) {\r\n    this.ws = new WebSocket(host);\r\n    this.ws.onopen = this.onClientConnected;\r\n    this.ws.onmessage = this.onDataReceived;\r\n    this.ws.onclose = this.onConnectionClosed;\r\n    this.ws.onerror = this.onErrorOccurred;\r\n  }\r\n\r\n  write(data: string) {\r\n    this.ws.send(data);\r\n  }\r\n\r\n  onClientConnected: () => void;\r\n  onDataReceived: (data: any) => void;\r\n  onConnectionClosed: () => void;  \r\n  onErrorOccurred: () => void;\r\n}\r\n","module.exports = \"\\r\\n.mat-toolbar {\\r\\n    position: fixed;\\r\\n    z-index: 2;\\r\\n    top: 0;\\r\\n}\"","module.exports = \"\\r\\n<mat-toolbar color=\\\"primary\\\">\\r\\n  <span>{{title}}</span>\\r\\n</mat-toolbar>\\r\\n\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-toolbar',\r\n  templateUrl: './toolbar.component.html',\r\n  styleUrls: ['./toolbar.component.css']\r\n})\r\nexport class ToolbarComponent implements OnInit {\r\n  title: string = \"Prime.Manager\";\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import 'hammerjs';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}