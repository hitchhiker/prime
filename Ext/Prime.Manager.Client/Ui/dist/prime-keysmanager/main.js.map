{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/exchange-dialog/exchange-dialog.component.css","webpack:///./src/app/exchange-dialog/exchange-dialog.component.html","webpack:///./src/app/exchange-dialog/exchange-dialog.component.ts","webpack:///./src/app/exchange/exchange.component.css","webpack:///./src/app/exchange/exchange.component.html","webpack:///./src/app/exchange/exchange.component.ts","webpack:///./src/app/exchanges/exchanges.component.css","webpack:///./src/app/exchanges/exchanges.component.html","webpack:///./src/app/exchanges/exchanges.component.ts","webpack:///./src/app/material.module.ts","webpack:///./src/app/models/Exchange.ts","webpack:///./src/app/models/ExchangeDetails.ts","webpack:///./src/app/models/messages.ts","webpack:///./src/app/models/private-api-context.ts","webpack:///./src/app/models/socket-state.ts","webpack:///./src/app/services/logger.service.ts","webpack:///./src/app/services/prime-socket.service.ts","webpack:///./src/app/services/ws-client.service.ts","webpack:///./src/app/toolbar/toolbar.component.css","webpack:///./src/app/toolbar/toolbar.component.html","webpack:///./src/app/toolbar/toolbar.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\r\\n.tab-content {\\r\\n    overflow-y: auto;\\r\\n}\\r\\n\\r\\n.tab-chart {\\r\\n    height: 500px;\\r\\n}\\r\\n\\r\\n.mat-tab-group {\\r\\n    padding-top: 64px;\\r\\n}\\r\\n\\r\\n\\r\\n\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n\\n<app-toolbar></app-toolbar>\\n\\n<mat-tab-group>\\n    <mat-tab label=\\\"Exchanges\\\">\\n        <div class=\\\"tab-content tab-exchanges\\\">\\n            <app-exchanges></app-exchanges>\\n        </div>\\n\\n    </mat-tab>\\n    <mat-tab label=\\\"Chart\\\">\\n        <div class=\\\"tab-content tab-chart\\\">\\n            Hello\\n        </div>\\n    </mat-tab>\\n</mat-tab-group>\"","import { Component, OnInit } from '@angular/core';\nimport { WsClientService } from './services/ws-client.service';\nimport { ISocketClient } from './models/interfaces/ISocketClient';\nimport { PrimeSocketService } from './services/prime-socket.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n\n  ngOnInit(): void {\n\n  }\n  \n  private url = 'http://localhost:3001';\n  private socket;\n\n  constructor(private primeTcpClient: PrimeSocketService) {\n    \n  }\n\n  title = 'Prime.KeysManager';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from \"./material.module\";\n\nimport { AppComponent } from './app.component';\nimport { ExchangesComponent } from './exchanges/exchanges.component';\nimport { ToolbarComponent } from './toolbar/toolbar.component';\nimport { ExchangeComponent } from './exchange/exchange.component';\nimport { ExchangeDialogComponent } from './exchange-dialog/exchange-dialog.component';\nimport { FormsModule } from '@angular/forms';\n\nimport { LoggerService } from './services/logger.service';\nimport { WsClientService } from './services/ws-client.service';\nimport { PrimeSocketService } from './services/prime-socket.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ExchangesComponent,\n    ToolbarComponent,\n    ExchangeComponent,\n    ExchangeDialogComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    MaterialModule,\n  ],\n  providers: [\n    LoggerService,\n    {provide: \"ISocketClient\", useClass: WsClientService},\n    PrimeSocketService,\n  ],\n  entryComponents: [\n    ExchangeDialogComponent\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<h2 mat-dialog-title>{{ exchangeDetails.title }} details</h2>\\n<mat-dialog-content>\\n\\n  <mat-form-field class=\\\"full-width\\\">\\n    <input matInput [(ngModel)]=\\\"exchangeDetails.privateApiContext.key\\\" placeholder=\\\"Public Key\\\">\\n  </mat-form-field>\\n\\n  <mat-form-field class=\\\"full-width\\\">\\n    <input matInput [(ngModel)]=\\\"exchangeDetails.privateApiContext.secret\\\" placeholder=\\\"Secret Key\\\">\\n  </mat-form-field>\\n\\n  <mat-slide-toggle [(ngModel)]=\\\"extraEnabled\\\" >Has Extra data</mat-slide-toggle>\\n\\n  <mat-form-field class=\\\"full-width\\\">\\n    <input matInput [disabled]=\\\"!extraEnabled\\\" [(ngModel)]=\\\"exchangeDetails.privateApiContext.extra\\\" placeholder=\\\"Extra\\\">\\n  </mat-form-field>\\n\\n</mat-dialog-content>\\n<mat-dialog-actions>\\n  <button mat-button [mat-dialog-close]=\\\"true\\\">Close</button>\\n  <span class=\\\"fill-space\\\"></span>\\n\\n  <button mat-button (click)=\\\"testPrivateApi()\\\">Test Private API</button>\\n  <button mat-button color=\\\"warn\\\">Delete</button>\\n  <button mat-raised-button color=\\\"primary\\\">Save</button>\\n</mat-dialog-actions>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { ExchangeDetails } from '../models/ExchangeDetails';\nimport { MatSnackBar } from '@angular/material';\nimport { PrimeSocketService } from '../services/prime-socket.service';\nimport { PrivateApiContext } from '../models/private-api-context';\n\n@Component({\n  selector: 'app-exchange-dialog',\n  templateUrl: './exchange-dialog.component.html',\n  styleUrls: ['./exchange-dialog.component.css']\n})\nexport class ExchangeDialogComponent implements OnInit {\n\n  extraEnabled: boolean = false;\n\n  @Input() exchangeDetails: ExchangeDetails;\n  constructor(\n    public snackBar: MatSnackBar,\n    private primeSocket: PrimeSocketService\n  ) {\n    this.exchangeDetails = new ExchangeDetails(\"Poloniex\", \n      new PrivateApiContext(\"awdjashdk1j2h3\", \"Key\", \"Secret\", \"Extra\"));\n  }\n\n  testPrivateApi() {\n    if(!this.extraEnabled)\n      this.exchangeDetails.privateApiContext.extra = null;\n\n    this.primeSocket.testPrivateApi(\n      this.exchangeDetails.privateApiContext\n    );\n\n    this.snackBar.open(\"Private API test!\", \"Info\", {\n      duration: 3000\n    });\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\r\\n.exchange-card {\\r\\n    margin: 10px;\\r\\n}\\r\\n\\r\\n.header .title {\\r\\n    font-size: 25px;\\r\\n    margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.header .description {\\r\\n    color: rgba(0, 0, 0, 0.6)\\r\\n}\\r\\n\\r\\n.mat-card-actions {\\r\\n    margin-top: 10px;\\r\\n}\\r\\n\"","module.exports = \"<mat-card class=\\\"exchange-card\\\">\\n  <mat-card-content class=\\\"header\\\">\\n    <mat-card-title class=\\\"title\\\">\\n        {{ exchange.name }}\\n    </mat-card-title>\\n    <mat-card-subtitle class=\\\"description\\\">{{ exchange.id }}</mat-card-subtitle>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <button mat-button color=\\\"primary\\\" (click)=\\\"openDialog(exchange.id)\\\">MANAGE</button>\\n  </mat-card-actions>\\n</mat-card>\"","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { Exchange } from '../models/Exchange';\n\nimport {MatDialog, MatDialogConfig} from \"@angular/material\";\nimport { ExchangeDialogComponent } from '../exchange-dialog/exchange-dialog.component';\nimport { LoggerService } from '../services/logger.service';\nimport { PrimeSocketService } from '../services/prime-socket.service';\n\n@Component({\n  selector: 'app-exchange',\n  templateUrl: './exchange.component.html',\n  styleUrls: ['./exchange.component.css']\n})\nexport class ExchangeComponent implements OnInit {\n\n  constructor(\n    private dialog: MatDialog,\n    private primeSocket: PrimeSocketService\n  ) { \n\n  }\n\n  @Input() exchange: Exchange;\n\n  openDialog(idHash: string) {\n    LoggerService.log(\"Opening dialog (\" + this.exchange.id + \")...\");\n\n    this.primeSocket.getProviderDetails(idHash, (data) => {\n      console.log(data);\n    });\n\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = false;\n    dialogConfig.autoFocus = true;\n\n    this.dialog.open(ExchangeDialogComponent, dialogConfig);\n  }\n\n  ngOnInit() {\n  }\n\n}\n\n","module.exports = \"\"","module.exports = \"<app-exchange *ngFor=\\\"let exchange of exchanges\\\" [exchange]=\\\"exchange\\\"></app-exchange>\"","import { Component, OnInit } from '@angular/core';\nimport { Exchange } from '../models/Exchange';\nimport { PrimeSocketService } from '../services/prime-socket.service';\nimport { ProvidersListResponseMessage } from '../models/messages';\nimport { LoggerService } from '../services/logger.service';\n\n@Component({\n  selector: 'app-exchanges',\n  templateUrl: './exchanges.component.html',\n  styleUrls: ['./exchanges.component.css']\n})\nexport class ExchangesComponent implements OnInit {\n\n  exchanges: Exchange[];\n\n  constructor(private primeTcpClient: PrimeSocketService) { }\n\n  ngOnInit() {\n    this.primeTcpClient.connect(() => {\n\n      this.primeTcpClient.getProviderProvidersList((data: ProvidersListResponseMessage) => {\n        LoggerService.logObj(data);\n        this.exchanges = data.response;\n      });\n    });\n  }\n\n}\n","import { NgModule } from \"@angular/core\";\nimport { MatButtonModule, MatDialogContent, MatFormFieldModule, MatInputModule } from \"@angular/material\";\nimport { MatToolbarModule } from \"@angular/material\";\nimport { MatTabsModule } from \"@angular/material\";\nimport { MatCardModule } from '@angular/material/card';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatDialogModule } from \"@angular/material\";\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\n\n@NgModule({\n    imports:\n        [\n            MatButtonModule,\n            MatToolbarModule,\n            MatTabsModule,\n            MatCardModule,\n            MatBadgeModule,\n            MatDialogModule,\n            MatFormFieldModule,\n            MatInputModule,\n            MatSlideToggleModule,\n            MatSnackBarModule\n        ],\n    exports:\n        [\n            MatButtonModule,\n            MatToolbarModule,\n            MatTabsModule,\n            MatCardModule,\n            MatBadgeModule,\n            MatDialogModule,\n            MatFormFieldModule,\n            MatInputModule,\n            MatSlideToggleModule,\n            MatSnackBarModule\n        ],\n})\nexport class MaterialModule { }\n","\r\nexport class Exchange {\r\n    \r\n    constructor(\r\n        public name: string,\r\n        public id: string,\r\n        public hasKeys: boolean = false\r\n    ) {}\r\n}\r\n","import { Exchange } from \"./Exchange\";\r\nimport { PrivateApiContext } from \"./private-api-context\";\r\n\r\nexport class ExchangeDetails extends Exchange {\r\n    constructor(\r\n        title: string,\r\n        public privateApiContext: PrivateApiContext\r\n    ) {\r\n        super(title, privateApiContext.exchangeId);\r\n    }\r\n}\r\n","import { Exchange } from \"./Exchange\";\n\nexport abstract class BaseMessage {\n    abstract $type: string;\n\n    serialize(): string {\n        return JSON.stringify(this, (key, value) => {\n            if(value !== null) return value;\n        });\n    }\n}\n\nexport abstract class BaseResponseMessage extends BaseMessage {\n    sessionId: string;\n}\n\nexport class UserMessageRequest extends BaseMessage {\n    $type: string = UserMessageRequest.name;\n\n    UserName: string;\n    Age: string;\n}\n\nexport class ProvidersListRequestMessage extends BaseMessage {\n    $type: string = \"prime.manager.providerslistrequestmessage\";\n}\nexport class ProvidersListResponseMessage extends BaseResponseMessage {\n    $type: string = \"prime.manager.providerslistresponsemessage\";\n\n    response: Exchange[];\n}\n\nexport class ProviderDetailsRequestMessage extends BaseMessage {\n    $type: string = \"prime.manager.providerdetailsrequestmessage\";\n    id: string;\n\n    constructor(id: string) {\n        super();\n\n        this.id = id;\n    }\n}\nexport class ProviderDetailsResponseMessage extends BaseResponseMessage {\n    $type: string = \"prime.manager.providerdetailsresponsemessage\";\n}\n\nexport class TestPrivateApiMessageRequest extends BaseMessage {\n    $type: string = TestPrivateApiMessageRequest.name;\n\n    constructor(\n        public ExchangeId: string,\n        public Key: string,\n        public Secret: string,\n        public Extra?: string\n    ) {\n        super();\n    }\n}\nexport class TestPrivateApiMessageResponse {\n\n}\n\nexport class ProviderKeysMessageRequest extends BaseMessage {\n    $type: string = ProviderKeysMessageRequest.name;\n}\nexport class ProviderKeysMessageResponse {\n    Id: string;\n    Key: string;\n    Extra: string;\n}\n\n\n","\nexport class PrivateApiContext {\n    constructor(\n        public exchangeId: string,\n        public key: string,\n        public secret: string,\n        public extra?: string\n    ) {  }\n}\n","\nexport enum SocketState {\n    Disconnected = 0,\n    Connected = 1,\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoggerService {\n\n  constructor() { }\n\n  static log(message: string) {\n    console.log(message);\n  }\n  \n  static logObj(object: any) {\n    console.log(object);\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { ISocketClient } from '../models/interfaces/ISocketClient';\nimport { LoggerService } from './logger.service';\nimport { SocketState } from '../models/socket-state';\nimport { ProvidersListRequestMessage, BaseMessage, TestPrivateApiMessageRequest, ProvidersListResponseMessage, ProviderDetailsResponseMessage, ProviderDetailsRequestMessage } from '../models/messages';\nimport { PrivateApiContext } from '../models/private-api-context';\nimport { GetProviderDetailsMessage } from 'models/core/msgs/Messages';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PrimeSocketService {\n\n  constructor(@Inject(\"ISocketClient\") private socketClient: ISocketClient) { }\n\n  private responseBuffer: any[];\n  private dataHandlerChannel: string;\n\n  private lastCallback: (data) => void = null;\n\n  socketState: SocketState = SocketState.Disconnected;\n\n  connect(callback: () => void) {\n    LoggerService.log(\"Starting TCP client...\");\n\n    this.socketClient.onClientConnected = () => {\n      LoggerService.log(\"Connected to Prime API server.\");\n      this.socketState = SocketState.Connected;\n      callback();\n    };\n\n    this.socketClient.onDataReceived = (data: any) => {\n      var objectData = JSON.parse(data.data);\n\n      if (this.lastCallback !== null) {\n        this.lastCallback(objectData);\n      }\n    };\n\n    this.socketClient.onConnectionClosed = () => {\n      LoggerService.log(\"Connection closed.\");\n      this.socketState = SocketState.Disconnected;\n    };\n\n    this.socketClient.connect('ws://127.0.0.1:9991/');\n  }\n\n  private writeSocket(data: string, callback?: (data) => void) {\n    if (callback !== null) {\n      this.lastCallback = callback;\n    }\n\n    this.socketClient.write(data);\n  }\n\n  private writeSocketMessage(data: BaseMessage, callback?: (data) => void) {\n    this.writeSocket(data.serialize(), callback);\n  }\n\n  test() {\n    this.writeSocket(\"Hello\");\n  }\n\n  getProviderProvidersList(callback: (data: ProvidersListResponseMessage) => void) {\n    this.writeSocketMessage(new ProvidersListRequestMessage(), callback);\n  }\n\n  getProviderDetails(idHash: string, callback: (data: ProviderDetailsResponseMessage) => void) {\n    this.writeSocketMessage(new ProviderDetailsRequestMessage(idHash), callback);\n  }\n\n  testPrivateApi(privateApiContext: PrivateApiContext) {\n    this.writeSocketMessage(new TestPrivateApiMessageRequest(\n      privateApiContext.exchangeId,\n      privateApiContext.key,\n      privateApiContext.secret,\n      privateApiContext.extra\n    ));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ISocketClient } from '../models/interfaces/ISocketClient';\nimport { LoggerService } from './logger.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WsClientService implements ISocketClient {\n  ws: WebSocket;\n\n  constructor() { \n    \n  }\n\n  connect(host: string) {\n    this.ws = new WebSocket(host);\n    this.ws.onopen = this.onClientConnected;\n    this.ws.onmessage = this.onDataReceived;\n    this.ws.onclose = this.onConnectionClosed;\n  }\n\n  write(data: string) {\n    this.ws.send(data);\n  }\n\n  onClientConnected: () => void;\n  onDataReceived: (data: any) => void;\n  onConnectionClosed: () => void;  \n}\n","module.exports = \"\\r\\n.mat-toolbar {\\r\\n    position: fixed;\\r\\n    z-index: 2;\\r\\n    top: 0;\\r\\n}\"","module.exports = \"\\n<mat-toolbar color=\\\"primary\\\">\\n  <span>{{title}}</span>\\n</mat-toolbar>\\n\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-toolbar',\n  templateUrl: './toolbar.component.html',\n  styleUrls: ['./toolbar.component.css']\n})\nexport class ToolbarComponent implements OnInit {\n  title: string = \"Prime.KeysManager\";\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}